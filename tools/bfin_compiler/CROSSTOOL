major_version: "local"
minor_version: ""
default_target_cpu: "bfin-elf"

default_toolchain {
  cpu: "bfin-elf"
  toolchain_identifier: "gcc_elf_bfin"
}

default_toolchain {
  cpu: "k8"
  toolchain_identifier: "local"
}

toolchain {
  abi_version: "gcc"
  abi_libc_version: "glibc_2.19"
  builtin_sysroot: ""
  compiler: "gcc"
  host_system_name: "bfin-elf"
  needsPic: true
  supports_gold_linker: false
  supports_incremental_linker: false
  supports_fission: false
  supports_interface_shared_objects: false
  supports_normalizing_ar: true
  supports_start_end_lib: false
  supports_thin_archives: true
  target_libc: "glibc_2.19"
  target_cpu: "bfin-elf"
  target_system_name: "bfin_bf592"
  toolchain_identifier: "gcc_elf_bfin"

  tool_path { name: "ar" path: "bfin_elf_gcc/bfin-elf-ar" }
  tool_path { name: "compat-ld" path: "bfin_elf_gcc/bfin-elf-ld" }
  tool_path { name: "cpp" path: "bfin_elf_gcc/bfin-elf-gcc" }
  tool_path { name: "dwp" path: "bfin_elf_gcc/bfin-elf-dwp" }
  tool_path { name: "gcc" path: "bfin_elf_gcc/bfin-elf-gcc" }
  tool_path { name: "gcov" path: "bfin_elf_gcc/bfin-elf-gcov" }
  # C(++) compiles invoke the compiler (as that is the one knowing where
  # to find libraries), but we provide LD so other rules can invoke the linker.
  tool_path { name: "ld" path: "bfin_elf_gcc/bfin-elf-ld" }
  tool_path { name: "nm" path: "bfin_elf_gcc/bfin-elf-nm" }
  tool_path { name: "objcopy" path: "bfin_elf_gcc/bfin-elf-objcopy" }
  objcopy_embed_flag: "-I"
  objcopy_embed_flag: "binary"
  tool_path { name: "objdump" path: "bfin_elf_gcc/bfin-elf-objdump" }
  tool_path { name: "strip" path: "bfin_elf_gcc/bfin-elf-strip" }

  compiler_flag: "--sysroot=external/com_analog_blackfin_toolchain_elf_gcc_4_5/bfin-elf/"

 # compiler_flag: "-nostdinc"
  compiler_flag: "-isystem"
  compiler_flag: "external/com_analog_blackfin_toolchain_elf_gcc_4_5/lib/gcc/bfin-elf/4.5.3/include"
  compiler_flag: "-isystem"
  compiler_flag: "external/com_analog_blackfin_toolchain_elf_gcc_4_5/lib/gcc/bfin-elf/4.5.3/include-fixed"

  cxx_flag: "-std=c++11"
  cxx_flag: "-isystem"
  cxx_flag: "external/com_analog_blackfin_toolchain_elf_gcc_4_5/lib/gcc/bfin-elf/4.5.3/include/c++/bfin-elf/"
  cxx_flag: "-isystem"
  cxx_flag: "external/com_analog_blackfin_toolchain_elf_gcc_4_5/lib/gcc/bfin-elf/4.5.3/include/c++/"

  cxx_builtin_include_directory: "%package(@com_analog_blackfin_toolchain_elf_gcc_4_5//include)%"
  cxx_builtin_include_directory: "%package(@com_analog_blackfin_toolchain_elf_gcc_4_5//lib/gcc/bfin-elf/4.5.3/include)%"
  cxx_builtin_include_directory: "%package(@com_analog_blackfin_toolchain_elf_gcc_4_5//lib/gcc/bfin-elf/4.5.3/include-fixed)%"

  #linker_flag: "--sysroot=external/com_analog_blackfin_toolchain_elf_gcc_4_5/bfin-elf/lib"
  linker_flag: "-Lexternal/com_analog_blackfin_toolchain_elf_gcc_4_5/bfin-elf/lib"
  linker_flag: "-Bexternal/com_analog_blackfin_toolchain_elf_gcc_4_5/bfin-elf/bin"

  # Anticipated future default.
  # This makes GCC and Clang do what we want when called through symlinks.
  unfiltered_cxx_flag: "-no-canonical-prefixes"
  linker_flag: "-no-canonical-prefixes"

  # Make C++ compilation deterministic. Use linkstamping instead of these
  # compiler symbols.
  unfiltered_cxx_flag: "-Wno-builtin-macro-redefined"
  unfiltered_cxx_flag: "-D__DATE__=\"redacted\""
  unfiltered_cxx_flag: "-D__TIMESTAMP__=\"redacted\""
  unfiltered_cxx_flag: "-D__TIME__=\"redacted\""

  # Security hardening on by default.
  # Conservative choice; -D_FORTIFY_SOURCE=2 may be unsafe in some cases.
  # We need to undef it before redefining it as some distributions now have
  # it enabled by default.
  compiler_flag: "-U_FORTIFY_SOURCE"
  compiler_flag: "-fstack-protector"
  #compiler_flag: "-fPIE"
  #linker_flag: "-pie"
  #linker_flag: "-Wl,-z,relro,-z,now"

  # Enable coloring even if there's no attached terminal. Bazel removes the
  # escape sequences if --nocolor is specified.
  #compiler_flag: "-fdiagnostics-color=always"

  # All warnings are enabled. Maybe enable -Werror as well?
  compiler_flag: "-Wall"
  # Enable a few more warnings that aren't part of -Wall.
  #compiler_flag: "-Wunused-but-set-parameter"
  # But disable some that are problematic.
  #compiler_flag: "-Wno-free-nonheap-object" # has false positives

  # Keep stack frames for debugging, even in opt mode.
  compiler_flag: "-fno-omit-frame-pointer"

  # Stamp the binary with a unique identifier.
  #linker_flag: "-Wl,--build-id=md5"
  #linker_flag: "-Wl,--hash-style=gnu"

  compilation_mode_flags {
    mode: DBG
    # Enable debug symbols.
    compiler_flag: "-g"
  }
  compilation_mode_flags {
    mode: OPT
    # No debug symbols.
    # Maybe we should enable https://gcc.gnu.org/wiki/DebugFission for opt or
    # even generally? However, that can't happen here, as it requires special
    # handling in Bazel.
    compiler_flag: "-g0"

    # Conservative choice for -O
    # -O3 can increase binary size and even slow down the resulting binaries.
    # Profile first and / or use FDO if you need better performance than this.
    compiler_flag: "-O2"

    # Disable assertions
    compiler_flag: "-DNDEBUG"

    # Removal of unused code and data at link time (can this increase binary size in some cases?).
    compiler_flag: "-ffunction-sections"
    compiler_flag: "-fdata-sections"
    linker_flag: "-Wl,--gc-sections"
  }
}

toolchain {
  toolchain_identifier: "local"
  abi_libc_version: "local"
  abi_version: "local"
  builtin_sysroot: ""
  compiler: "compiler"
  compiler_flag: "-U_FORTIFY_SOURCE"
  compiler_flag: "-D_FORTIFY_SOURCE=1"
  compiler_flag: "-fstack-protector"
  compiler_flag: "-Wall"
  compiler_flag: "-Wl,-z,-relro,-z,now"
  compiler_flag: "-B/usr/bin"
  compiler_flag: "-B/usr/bin"
  compiler_flag: "-Wunused-but-set-parameter"
  compiler_flag: "-Wno-free-nonheap-object"
  compiler_flag: "-fno-omit-frame-pointer"
  cxx_builtin_include_directory: "/usr/include/c++/6"
  cxx_builtin_include_directory: "/usr/include/c++/5"
  cxx_builtin_include_directory: "/usr/include/x86_64-linux-gnu/c++/6"
  cxx_builtin_include_directory: "/usr/include/x86_64-linux-gnu/c++/5"
  cxx_builtin_include_directory: "/usr/include/c++/6/backward"
  cxx_builtin_include_directory: "/usr/include/c++/5/backward"
  cxx_builtin_include_directory: "/usr/lib/gcc/x86_64-linux-gnu/6/include"
  cxx_builtin_include_directory: "/usr/lib/gcc/x86_64-linux-gnu/5/include"
  cxx_builtin_include_directory: "/usr/local/include"
  cxx_builtin_include_directory: "/usr/lib/gcc/x86_64-linux-gnu/6/include-fixed"
  cxx_builtin_include_directory: "/usr/lib/gcc/x86_64-linux-gnu/5/include-fixed"
  cxx_builtin_include_directory: "/usr/include/x86_64-linux-gnu"
  cxx_builtin_include_directory: "/usr/include"
  cxx_flag: "-std=c++0x"
  host_system_name: "local"
  linker_flag: "-lstdc++"
  linker_flag: "-lm"
  linker_flag: "-Wl,-no-as-needed"
  linker_flag: "-B/usr/bin"
  linker_flag: "-B/usr/bin"
  linker_flag: "-pass-exit-codes"
  linker_flag: "-Wl,--build-id=md5"
  linker_flag: "-Wl,--hash-style=gnu"
  needsPic: true
  objcopy_embed_flag: "-I"
  objcopy_embed_flag: "binary"
  supports_fission: false
  supports_gold_linker: false
  supports_incremental_linker: false
  supports_interface_shared_objects: false
  supports_normalizing_ar: false
  supports_start_end_lib: false
  supports_thin_archives: false
  target_cpu: "k8"
  target_libc: "local"
  target_system_name: "local"
  unfiltered_cxx_flag: "-fno-canonical-system-headers"
  unfiltered_cxx_flag: "-Wno-builtin-macro-redefined"
  unfiltered_cxx_flag: "-D__DATE__=\"redacted\""
  unfiltered_cxx_flag: "-D__TIMESTAMP__=\"redacted\""
  unfiltered_cxx_flag: "-D__TIME__=\"redacted\""
  tool_path {name: "ar" path: "/usr/bin/ar" }
  tool_path {name: "cpp" path: "/usr/bin/cpp" }
  tool_path {name: "dwp" path: "/usr/bin/dwp" }
  tool_path {name: "gcc" path: "/usr/bin/gcc" }
  tool_path {name: "gcov" path: "/usr/bin/gcov" }
  tool_path {name: "ld" path: "/usr/bin/ld" }
  tool_path {name: "nm" path: "/usr/bin/nm" }
  tool_path {name: "objcopy" path: "/usr/bin/objcopy" }
  tool_path {name: "objdump" path: "/usr/bin/objdump" }
  tool_path {name: "strip" path: "/usr/bin/strip" }

  compilation_mode_flags {
    mode: DBG
    compiler_flag: "-g"
  }
  compilation_mode_flags {
    mode: OPT
    compiler_flag: "-g0"
    compiler_flag: "-O2"
    compiler_flag: "-DNDEBUG"
    compiler_flag: "-ffunction-sections"
    compiler_flag: "-fdata-sections"
    linker_flag: "-Wl,--gc-sections"
  }
  linking_mode_flags { mode: DYNAMIC }
}
